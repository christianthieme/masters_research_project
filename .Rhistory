step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric()) %>%
step_upsample(breakout, over_ratio = 1.0)
doParallel::registerDoParallel()
wr_wf <- workflow() %>%
add_model(wr_rf_mod) %>%
add_recipe(wr_recipe)
wr_wf_fit <- wr_wf %>%
tune_grid(validataion_data,
#  resamples = folds,
grid = 20,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)#%>%
#fit_resamples(folds)
wr_wf_fit$.notes
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(VIM)
library(mice)
library(ranger)
library(tidymodels)
library(doParallel)
library(janitor)
wr <- readr::read_csv("https://raw.githubusercontent.com/christianthieme/masters_research_project/master/wide_receiver_databaseV1.csv") %>%
mutate_if(is.character, as.factor)
head(wr)
wr2 <- wr %>%
filter(Draft_Year < 2019 ) %>%
select(-contains("_23")) %>%
mutate(Drafted = as.factor(ifelse(DR == 'UDFA', 'No', 'Yes'))) %>%
mutate(DR = ifelse(DR == 'UDFA', 10, DR)) %>%
mutate(DP = ifelse(DP == 'UDFA', 999, DP)) %>%
mutate(breakout = as.factor(ifelse(fantasy_ppg >= 10, 'Yes', 'No'))) %>%
##  mutate(Draft_year = as.factor(Draft_Year)) %>%
mutate(CareerAverage_KRTDs = as.numeric(CareerAverage_KRTDs)) %>%
mutate(CareerAverage_PuntReturns = as.numeric(CareerAverage_PuntReturns)) %>%
mutate(CareerAverage_PRYards = as.numeric(CareerAverage_PRYards)) %>%
mutate(CareerAverage_PRTDs = as.numeric(CareerAverage_PRTDs))
wr2
wr2 %>%
count(breakout)
wr_fill_0 <- wr2 %>%
select(-Combine_BMI, -Combine_Height, -Combine_Weight, -Combine_HandSize, -Combine_ArmLength, -Combine_40time, -Combine_Bench, -Combine_Vertical, -Combine_Broad, -Combine_Shuttle, -Combine_3Cone, -Combine_HaSS, -RAS, -Agility_Score, -Burst_Score, -Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB))
wr_fill_0[is.na(wr_fill_0)] <- 0
# wr_fill_0_key <- wr_fill_0 %>%
#   mutate(key = paste0(Player, School, Conf, DOB)
wr_fill_impute_select <- wr2 %>%
select(Player, School, Conf, DOB, Combine_BMI, Combine_Height, Combine_Weight, Combine_HandSize, Combine_ArmLength, Combine_40time, Combine_Bench, Combine_Vertical, Combine_Broad, Combine_Shuttle, Combine_3Cone, Combine_HaSS, RAS, Agility_Score, Burst_Score, Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB)) %>%
select(-Player, -School, -Conf, -DOB)
wr_no_nulls <- wr_fill_0 %>%
left_join(wr_fill_impute_select, by = "key") %>%
select(-Draft_Year, -key)
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
wr_no_nulls <- wr_no_nulls %>%
janitor::clean_names()
wr_no_nulls %>%
count(breakout) %>%
mutate(prop = n/sum(n))
set.seed(222)
train_test_split <- initial_split(wr_no_nulls, strata = breakout)
wr_train <- training(train_test_split)
wr_test <- testing(train_test_split)
set.seed(345)
folds <- vfold_cv(wr_train, v = 5)
cores <- parallel::detectCores()
wr_rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1500) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
wr_recipe <-
recipe(breakout ~ ., data = wr_train ) %>%
update_role(player, new_role = "ID") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric()) %>%
step_upsample(breakout, over_ratio = 1.0)
doParallel::registerDoParallel()
wr_wf <- workflow() %>%
add_model(wr_rf_mod) %>%
add_recipe(wr_recipe)
wr_wf_fit <-
tune_grid( wr_wf,
resamples = folds,
grid = 20,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)#%>%
#fit_resamples(folds)
wr_wf_fit$.notes
set.seed(345)
folds <- vfold_cv(wr_train, v = 5)
wr_rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1500) %>%
set_engine("ranger") %>%
set_mode("classification")
wr_recipe <-
recipe(breakout ~ ., data = wr_train ) %>%
update_role(player, new_role = "ID") %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric()) %>%
step_upsample(breakout, over_ratio = 1.0)
doParallel::registerDoParallel()
wr_wf <- workflow() %>%
add_model(wr_rf_mod) %>%
add_recipe(wr_recipe)
wr_wf_fit <-
tune_grid( wr_wf,
resamples = folds,
grid = 20,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)#%>%
#fit_resamples(folds)
collect_metrics(wr_wf_fit)
wr_wf_fit %>% select_best(metric = "roc_auc")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(VIM)
library(mice)
library(ranger)
library(tidymodels)
library(janitor)
wr <- readr::read_csv("https://raw.githubusercontent.com/christianthieme/masters_research_project/master/wide_receiver_databaseV1.csv")  %>%
mutate_if(is.character, as.factor)
head(wr)
wr2 <- wr %>%
filter(Draft_Year < 2019 ) %>%
select(-contains("_23")) %>%
mutate(Drafted = as.factor(ifelse(DR == 'UDFA', 'No', 'Yes'))) %>%
mutate(DR = ifelse(DR == 'UDFA', 10, DR)) %>%
mutate(DP = ifelse(DP == 'UDFA', 999, DP)) %>%
mutate(breakout = as.factor(ifelse(fantasy_ppg >= 10, 'Yes', 'No'))) %>%
##  mutate(Draft_year = as.factor(Draft_Year)) %>%
mutate(CareerAverage_KRTDs = as.numeric(CareerAverage_KRTDs)) %>%
mutate(CareerAverage_PuntReturns = as.numeric(CareerAverage_PuntReturns)) %>%
mutate(CareerAverage_PRYards = as.numeric(CareerAverage_PRYards)) %>%
mutate(CareerAverage_PRTDs = as.numeric(CareerAverage_PRTDs))
wr2
wr2 %>%
count(breakout)
wr_fill_0 <- wr2 %>%
select(-Combine_BMI, -Combine_Height, -Combine_Weight, -Combine_HandSize, -Combine_ArmLength, -Combine_40time, -Combine_Bench, -Combine_Vertical, -Combine_Broad, -Combine_Shuttle, -Combine_3Cone, -Combine_HaSS, -RAS, -Agility_Score, -Burst_Score, -Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB))
wr_fill_0[is.na(wr_fill_0)] <- 0
# wr_fill_0_key <- wr_fill_0 %>%
#   mutate(key = paste0(Player, School, Conf, DOB)
wr_fill_impute_select <- wr2 %>%
select(Player, School, Conf, DOB, Combine_BMI, Combine_Height, Combine_Weight, Combine_HandSize, Combine_ArmLength, Combine_40time, Combine_Bench, Combine_Vertical, Combine_Broad, Combine_Shuttle, Combine_3Cone, Combine_HaSS, RAS, Agility_Score, Burst_Score, Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB)) %>%
select(-Player, -School, -Conf, -DOB)
wr_no_nulls <- wr_fill_0 %>%
left_join(wr_fill_impute_select, by = "key") %>%
select(-Draft_Year, -key)
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
wr_no_nulls <- wr_no_nulls %>%
janitor::clean_names()
wr_no_nulls %>%
count(breakout) %>%
mutate(prop = n/sum(n))
set.seed(222)
train_test_split <- initial_split(wr_no_nulls, strata = breakout)
wr_train <- training(train_test_split)
wr_test <- testing(train_test_split)
set.seed(234)
val_set <- validation_split(wr_train,
strata = breakout,
prop = 0.80)
cores <- parallel::detectCores()
cores
rf_mod <-
rand_forest(mtry = tune(),
min_n = tune(),
trees = 1500) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_mod
rf_recipe <-
recipe(breakout ~ ., data = wr_train) %>%
update_role(player , new_role = "ID") %>%
step_novel(all_nominal(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric(), -all_outcomes()) %>%
step_upsample(breakout, over_ratio = 1.0)
rf_workflow <-
workflow() %>%
add_model(rf_mod) %>%
add_recipe(rf_recipe)
rf_res <-
rf_workflow %>%
tune_grid(val_set,
grid = 15,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)
rf_res
rf_res %>% show_best(metric = "roc_auc")
cores <- parallel::detectCores()
cores
rf_res$.notes
cores <- parallel::detectCores()
cores
rf_mod <-
rand_forest(mtry = tune(),
min_n = tune(),
trees = 1500) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_mod
rf_recipe <-
recipe(breakout ~ ., data = wr_train) %>%
update_role(player , new_role = "ID") %>%
step_novel(all_nominal(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric(), -all_outcomes()) %>%
step_upsample(breakout, over_ratio = 1.0)
rf_workflow <-
workflow() %>%
add_model(rf_mod) %>%
add_recipe(rf_recipe)
rf_res <-
rf_workflow %>%
tune_grid(val_set,
grid = 15,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)
rf_res
rf_res$.notes
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(VIM)
library(mice)
library(ranger)
library(tidymodels)
library(janitor)
wr <- readr::read_csv("https://raw.githubusercontent.com/christianthieme/masters_research_project/master/wide_receiver_databaseV1.csv")  %>%
mutate_if(is.character, as.factor)
head(wr)
wr2 <- wr %>%
filter(Draft_Year < 2019 ) %>%
select(-contains("_23")) %>%
mutate(Drafted = as.factor(ifelse(DR == 'UDFA', 'No', 'Yes'))) %>%
mutate(DR = ifelse(DR == 'UDFA', 10, DR)) %>%
mutate(DP = ifelse(DP == 'UDFA', 999, DP)) %>%
mutate(breakout = as.factor(ifelse(fantasy_ppg >= 10, 'Yes', 'No'))) %>%
##  mutate(Draft_year = as.factor(Draft_Year)) %>%
mutate(CareerAverage_KRTDs = as.numeric(CareerAverage_KRTDs)) %>%
mutate(CareerAverage_PuntReturns = as.numeric(CareerAverage_PuntReturns)) %>%
mutate(CareerAverage_PRYards = as.numeric(CareerAverage_PRYards)) %>%
mutate(CareerAverage_PRTDs = as.numeric(CareerAverage_PRTDs))
wr2
wr2 %>%
count(breakout)
wr_fill_0 <- wr2 %>%
select(-Combine_BMI, -Combine_Height, -Combine_Weight, -Combine_HandSize, -Combine_ArmLength, -Combine_40time, -Combine_Bench, -Combine_Vertical, -Combine_Broad, -Combine_Shuttle, -Combine_3Cone, -Combine_HaSS, -RAS, -Agility_Score, -Burst_Score, -Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB))
wr_fill_0[is.na(wr_fill_0)] <- 0
# wr_fill_0_key <- wr_fill_0 %>%
#   mutate(key = paste0(Player, School, Conf, DOB)
wr_fill_impute_select <- wr2 %>%
select(Player, School, Conf, DOB, Combine_BMI, Combine_Height, Combine_Weight, Combine_HandSize, Combine_ArmLength, Combine_40time, Combine_Bench, Combine_Vertical, Combine_Broad, Combine_Shuttle, Combine_3Cone, Combine_HaSS, RAS, Agility_Score, Burst_Score, Freak_Score) %>%
mutate(key = paste0(Player, School, Conf, DOB)) %>%
select(-Player, -School, -Conf, -DOB)
wr_no_nulls <- wr_fill_0 %>%
left_join(wr_fill_impute_select, by = "key") %>%
select(-Draft_Year, -key)
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
null_cols<- colSums(is.na(wr_no_nulls))
null_cols[null_cols>0]
wr_no_nulls <- wr_no_nulls %>%
janitor::clean_names()
wr_no_nulls %>%
count(breakout) %>%
mutate(prop = n/sum(n))
set.seed(222)
train_test_split <- initial_split(wr_no_nulls, strata = breakout)
wr_train <- training(train_test_split)
wr_test <- testing(train_test_split)
set.seed(234)
val_set <- validation_split(wr_train,
strata = breakout,
prop = 0.80)
cores <- parallel::detectCores()
cores
rf_mod <-
rand_forest(mtry = tune(),
min_n = tune(),
trees = 1500) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_mod
rf_recipe <-
recipe(breakout ~ ., data = wr_train) %>%
update_role(player , new_role = "ID") %>%
step_novel(all_nominal(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>% #remove all variables with only a single value
step_normalize(all_predictors()) %>%
step_knnimpute(all_predictors()) %>%
step_pca(all_numeric(), -all_outcomes()) %>%
step_upsample(breakout, over_ratio = 1.0)
rf_workflow <-
workflow() %>%
add_model(rf_mod) %>%
add_recipe(rf_recipe)
rf_res <-
rf_workflow %>%
tune_grid(val_set,
grid = 15,
# split_rule = "gini",
control = control_grid(save_pred =TRUE),
metrics = metric_set(roc_auc)
)
rf_res
rf_res$.notes
rf_res %>% show_best(metric = "roc_auc")
parallel::detectCores()
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(xml2)
library(tidyverse)
url <- xml2::read_html("https://www.pro-football-reference.com/teams/cle/2018.htm#rushing_and_receiving")
data <- url %>%
# html_nodes('body') %>%
# html_nodes('*[id="content"]') %>%
html_nodes('*[id="all_rushing_and_receiving"]') %>%
html_nodes(xpath = 'comment()') %>%
html_text() %>%
read_html() %>%
html_node('table') %>%
html_table()
# html_nodes('.per_match_toggle sortable stats_table now_sortable')
data
names(data) <- c("No.", "Player", "Age", "Pos", "Games_G", "Games_GS", "Rushing_Att", "Rushing_Yds", "Rushing_TD", "Rushing_Lng", "Rushing_YA", "Rushing_YG",  "Rushing_AG", "Receiving_Tgt", "Receiving_Rec", "Receiving_Yds", "Receiving_YR","Receiving_TD", "Receiving_Lng", "Receiving_RG", "Receiving_YG", "Receiving_Ctch", "Receiving_Y_Tgt", "Total_Yds_Touch", "Total_Yds_Y_Tch", "Total_Yds_Y_Scm", "RRTD", "Fmb")
data <- data[c(2:length(data)),]
data
wide_receiver <-  data %>%
dplyr::filter(Pos == 'WR') %>%
dplyr::select(Player, Pos, Receiving_Rec, Receiving_Yds) %>%
dplyr::arrange(desc(Receiving_Yds)) %>%
dplyr::top_n(1) %>%
mutate(
Receiving_Yds = as.numeric(Receiving_Yds),
Opportunity = ifelse(Receiving_Yds >= 1400, 1,
ifelse(Receiving_Yds >= 1200, 2,
ifelse(Receiving_Yds >= 1000, 3,
ifelse(Receiving_Yds >= 800, 4,
5)))))
wide_receiver
scraper_func <- function(base_url, team, year, ending) {
build_url <- paste0(base_url, team, "/", year, ending)
url <- xml2::read_html(build_url)
data <- url %>%
html_nodes('*[id="all_rushing_and_receiving"]') %>%
html_nodes(xpath = 'comment()') %>%
html_text() %>%
read_html() %>%
html_node('table') %>%
html_table()
names(data) <- c("No.", "Player", "Age", "Pos", "Games_G", "Games_GS", "Rushing_Att", "Rushing_Yds", "Rushing_TD", "Rushing_Lng", "Rushing_YA", "Rushing_YG",  "Rushing_AG", "Receiving_Tgt", "Receiving_Rec", "Receiving_Yds", "Receiving_YR","Receiving_TD", "Receiving_Lng", "Receiving_RG", "Receiving_YG", "Receiving_Ctch", "Receiving_Y_Tgt", "Total_Yds_Touch", "Total_Yds_Y_Tch", "Total_Yds_Y_Scm", "RRTD", "Fmb")
data <- data[c(2:length(data)),]
wide_receiver <-  data %>%
dplyr::filter(Player != 'Team Total') %>%
dplyr::filter(Player != 'Opp Total') %>%
#dplyr::filter(Pos %in% c('WR', 'wr', 'TE')) %>%
dplyr::select(Player, Pos, Receiving_Rec, Receiving_Yds) %>%
dplyr::arrange(desc(as.numeric(Receiving_Yds))) %>%
dplyr::top_n(1, wt = as.numeric(Receiving_Yds)) %>%
mutate(
Receiving_Yds = as.numeric(Receiving_Yds),
Opportunity = ifelse(Receiving_Yds >= 1465, 1,
ifelse(Receiving_Yds >= 1240, 2,
ifelse(Receiving_Yds >= 929, 3,
ifelse(Receiving_Yds >= 657, 4,
5))))) %>%
mutate(
Team = team,
Year = year,
Next_Year = as.numeric(year) + 1,
Team_Next_Year = paste(team, Next_Year, sep = "-")
)
return(wide_receiver)
}
ggplot()
scraper_func("https://www.pro-football-reference.com/teams/", "cle", "2017", ".htm#rushing_and_receiving")
pickle <- scraper_func("https://www.pro-football-reference.com/teams/", "cle", "2017", ".htm#rushing_and_receiving")
wr_df <- data.frame()
wr_df <- rbind(wr_df, pickle)
wr_df
wr_df <- data.frame()
teams <- c('crd', 'atl','rav', 'buf','car', 'chi', 'cin', 'cle', 'dal', 'den', 'det', 'gnb', 'htx', 'clt', 'jax', 'kan', 'sdg', 'ram', 'mia', 'min', 'nwe', 'nor', 'nyg', 'nyj', 'rai', 'phi', 'pit', 'sfo', 'sea', 'tam', 'oti', 'was')
years <- seq(2002,2021)
for (team in teams){
for (year in years){
receiver <- scraper_func("https://www.pro-football-reference.com/teams/", team, year, ".htm#rushing_and_receiving")
wr_df <- rbind(wr_df, receiver)
}
}
library(rvest)
library(xml2)
library(tidyverse)
url <- xml2::read_html("https://www.pro-football-reference.com/teams/cle/2018.htm#rushing_and_receiving")
data <- url %>%
# html_nodes('body') %>%
# html_nodes('*[id="content"]') %>%
html_nodes('*[id="all_rushing_and_receiving"]') %>%
html_nodes(xpath = 'comment()') %>%
html_text() %>%
read_html() %>%
html_node('table') %>%
html_table()
# html_nodes('.per_match_toggle sortable stats_table now_sortable')
data
names(data) <- c("No.", "Player", "Age", "Pos", "Games_G", "Games_GS", "Rushing_Att", "Rushing_Yds", "Rushing_TD", "Rushing_Lng", "Rushing_YA", "Rushing_YG",  "Rushing_AG", "Receiving_Tgt", "Receiving_Rec", "Receiving_Yds", "Receiving_YR","Receiving_TD", "Receiving_Lng", "Receiving_RG", "Receiving_YG", "Receiving_Ctch", "Receiving_Y_Tgt", "Total_Yds_Touch", "Total_Yds_Y_Tch", "Total_Yds_Y_Scm", "RRTD", "Fmb")
data <- data[c(2:length(data)),]
data
wide_receiver <-  data %>%
dplyr::filter(Pos == 'WR') %>%
dplyr::select(Player, Pos, Receiving_Rec, Receiving_Yds) %>%
dplyr::arrange(desc(Receiving_Yds)) %>%
dplyr::top_n(1) %>%
mutate(
Receiving_Yds = as.numeric(Receiving_Yds),
Opportunity = ifelse(Receiving_Yds >= 1400, 1,
ifelse(Receiving_Yds >= 1200, 2,
ifelse(Receiving_Yds >= 1000, 3,
ifelse(Receiving_Yds >= 800, 4,
5)))))
wide_receiver
scraper_func <- function(base_url, team, year, ending) {
build_url <- paste0(base_url, team, "/", year, ending)
url <- xml2::read_html(build_url)
data <- url %>%
html_nodes('*[id="all_rushing_and_receiving"]') %>%
html_nodes(xpath = 'comment()') %>%
html_text() %>%
read_html() %>%
html_node('table') %>%
html_table()
names(data) <- c("No.", "Player", "Age", "Pos", "Games_G", "Games_GS", "Rushing_Att", "Rushing_Yds", "Rushing_TD", "Rushing_Lng", "Rushing_YA", "Rushing_YG",  "Rushing_AG", "Receiving_Tgt", "Receiving_Rec", "Receiving_Yds", "Receiving_YR","Receiving_TD", "Receiving_Lng", "Receiving_RG", "Receiving_YG", "Receiving_Ctch", "Receiving_Y_Tgt", "Total_Yds_Touch", "Total_Yds_Y_Tch", "Total_Yds_Y_Scm", "RRTD", "Fmb")
data <- data[c(2:length(data)),]
wide_receiver <-  data %>%
dplyr::filter(Player != 'Team Total') %>%
dplyr::filter(Player != 'Opp Total') %>%
#dplyr::filter(Pos %in% c('WR', 'wr', 'TE')) %>%
dplyr::select(Player, Pos, Receiving_Rec, Receiving_Yds) %>%
dplyr::arrange(desc(as.numeric(Receiving_Yds))) %>%
dplyr::top_n(1, wt = as.numeric(Receiving_Yds)) %>%
mutate(
Receiving_Yds = as.numeric(Receiving_Yds),
Opportunity = ifelse(Receiving_Yds >= 1465, 1,
ifelse(Receiving_Yds >= 1240, 2,
ifelse(Receiving_Yds >= 929, 3,
ifelse(Receiving_Yds >= 657, 4,
5))))) %>%
mutate(
Team = team,
Year = year,
Next_Year = as.numeric(year) + 1,
Team_Next_Year = paste(team, Next_Year, sep = "-")
)
return(wide_receiver)
}
scraper_func("https://www.pro-football-reference.com/teams/", "cle", "2017", ".htm#rushing_and_receiving")
pickle <- scraper_func("https://www.pro-football-reference.com/teams/", "cle", "2017", ".htm#rushing_and_receiving")
wr_df <- data.frame()
wr_df <- rbind(wr_df, pickle)
wr_df
wr_df <- data.frame()
teams <- c('crd', 'atl','rav', 'buf','car', 'chi', 'cin', 'cle', 'dal', 'den', 'det', 'gnb', 'htx', 'clt', 'jax', 'kan', 'sdg', 'ram', 'mia', 'min', 'nwe', 'nor', 'nyg', 'nyj', 'rai', 'phi', 'pit', 'sfo', 'sea', 'tam', 'oti', 'was')
years <- seq(2002,2021)
for (team in teams){
for (year in years){
receiver <- scraper_func("https://www.pro-football-reference.com/teams/", team, year, ".htm#rushing_and_receiving")
wr_df <- rbind(wr_df, receiver)
}
}
wr_df
readr::write_csv(wr_df, 'C:/Users/chris/OneDrive/Master Of Data Science - CUNY/last_semester/masters_research_project/WReceiverOpp.csv')
wr <- readr::read_csv("https://raw.githubusercontent.com/christianthieme/masters_research_project/master/wide_receiver_databaseV1.csv")  %>%
mutate_if(is.character, as.factor)
